Questions:

Single-Row Subqueries:

Write a query to find the maximum duration among the tracks. Your query should include TrackId, Name, Milliseconds.

Write a query to find the minimum duration among the tracks. Your query should include TrackId, Name, Milliseconds.

Write a query to find the tracks whose bytes are higher than the average of the bytes of all tracks. Your query should include TrackId, Name, Bytes, general average and should be ordered by Bytes from highest to lowest. General average is the average of all tracks. General average should repeat in every row. (Hint: You need to use two subqueries)

   Multiple-Row Subqueries:

Write a query that returns the customers whose sales representatives are Jane Peacock and Margaret Park. Your query should include CustomerID, First Name and Last Name of the customers.

Rewrite the subquery above using the JOIN.

   DDL (CREATE, ALTER, DELETE) and DML (SELECT, INSERT, UPDATE, DELETE) Statements

Create a table inside the chinook database. This table tracks the employees’ courses inside the organization. Your table should have the followings features:

               Name of the table: courses
               Columns:
                    CourseId (Primary Key)
                    CourseName (Cannot be null)
                    EmployeeId (Foreign Key - Refers to EmployeeId of employees table ) 
                    CoursePrice

      2. Insert at least 10 rows into the courses table. Your EmployeeId should contain the values of the EmployeeId column on the employees table. You’re free to choose any values for other columns (CourseId, CourseName, CoursePrice)
Delete the last row of your courses table.

Add a new column to your courses table named StartDate. The new column cannot be null.

Delete the CoursePrice column.

Delete the courses table.

_______________________________________________


Single-Row Subqueries:



1) SELECT TrackId, Name, Milliseconds FROM tracks WHERE Milliseconds = (SELECT MAX(Milliseconds) FROM tracks);



2) SELECT TrackId, Name, Milliseconds FROM tracks WHERE Milliseconds = (SELECT MIN(Milliseconds) FROM tracks);



3)SELECT TrackId, name, Bytes, (SELECT AVG(Bytes) FROM tracks) AS general_average FROM tracks WHERE Bytes > (SELECT AVG(Bytes) FROM tracks) ORDER BY Bytes DESC ;



Multiple-Row Subqueries:



1)SELECT CustomerId, FirstName, LastName FROM customers WHERE SupportRepId IN (SELECT EmployeeId FROM employees WHERE FirstName IN ('Jane', 'Margaret'));



2)SELECT 

 customers.CustomerId,

 customers.FirstName,

 customers.LastName

FROM customers

INNER JOIN employees

ON employees.EmployeeId = customers.SupportRepId

WHERE employees.FirstName = 'Jane' OR employees.FirstName = 'Margaret';



DDL (CREATE, ALTER, DELETE) and DML (SELECT, INSERT, UPDATE, DELETE) Statements



1) CREATE TABLE courses (

	Courseld INT PRIMARY KEY,

	CourseName TEXT NOT NULL,

	EmployeeId INT,

	CoursePrice REAL,

	FOREIGN KEY (EmployeeId)

	REFERENCES employees(EmployeeId)

);



2) INSERT INTO courses (Courseld, CourseName, EmployeeId, CoursePrice)

VALUES (200, "Python", 1, 200),

	   (201, "HTML", 2, 85.5),

	   (202, "CSS", 3, 100),

	   (203, "JavaScript", 4, 150),

	   (204, "Jira", 5, 100),

	   (205, "SDLC", 6, 90),

	   (206, "Agile", 7, 90),

	   (207, "GİT", 8, 95),

	   (208, "GitHub", 8, 95),

	   (209, "Linux", 1, 150);



3) DELETE FROM courses WHERE Courseld = 209;



4) ALTER TABLE courses

ADD COLUMN StartDate DATE NOT NULL

DEFAULT "09-08-2020";



5) ALTER TABLE courses

DROP CoursePrice;



6)DROP TABLE courses;